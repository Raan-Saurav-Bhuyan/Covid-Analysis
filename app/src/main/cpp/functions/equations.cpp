#include <iostream>
#include "covid.h"      /* Header is included to make the 'covid' class and other functions		 *
						 * accessible for the function calls.									 *
						 */

using namespace std;

//================================================================================================//
/**----------------------------------------------------------------------------------------------**
 ** Eq. (2)																						 **
 **/

float tools::Ncases(int jx, float Kx, float Ax, float rx) {

	return Kx / (1 + Ax * exp(-rx * jx));
}
//================================================================================================//

//================================================================================================//
/**----------------------------------------------------------------------------------------------**
 ** Eq. (3)																						 **
 **/

float tools::dNcases(int jx, float Kx, float Ax, float rx) {

	return Kx * Ax * rx * exp(-rx * jx) / ((1 + Ax * exp(-rx * jx)) * (1 + Ax * exp(-rx * jx)));
}
//================================================================================================//

//================================================================================================//
/**----------------------------------------------------------------------------------------------**
 ** First relation in Eq. (12)																	 **
 **/

float tools::K(float C1, float C2, float C3) {

	return C2 * (C1 * C2 - 2 * C1 * C3 + C2 * C3) / (C2 * C2 - C3 * C1);
}
//================================================================================================//

//================================================================================================//
/**----------------------------------------------------------------------------------------------**
 ** Second relation in Eq. (12)																	 **
 **/

float tools::A(float m, float jx, float C1, float C2, float C3) {

	float partial, exponent;

	exponent = (jx - m) / m;

	partial = (C3 - C2) * (C2 - C1) / (C2 * C2 - C3 * C1);

	partial *= pow((C3 * (C2 - C1) / (C1 * (C3 - C2))), exponent);

	return partial;
}
//================================================================================================//

//================================================================================================//
/**----------------------------------------------------------------------------------------------**
 ** Third relation in Eq. (12)																	 **
 **/

float tools::r(float m, float C1, float C2, float C3) {

	return log(C3 * (C2 - C1) / (C1 * (C3 - C2))) / m;
}
//================================================================================================//

//================================================================================================//
/**----------------------------------------------------------------------------------------------**
 ** First relation in Eq. (11)																	 **
 **/

float tools::dNdK(int tx, float Kx, float Ax, float rx) {

	return 1 / (1 + Ax * exp(-rx * tx));
}
//================================================================================================//

//================================================================================================//
/**----------------------------------------------------------------------------------------------**
 ** Second relation in Eq. (11)																	 **
 **/

float tools::dNdA(int tx, float Kx, float Ax, float rx) {

	return -Kx * exp(-rx * tx) / ((1 + Ax * exp(-rx * tx)) * (1 + Ax * exp(-rx * tx)));
}
//================================================================================================//

//================================================================================================//
/**----------------------------------------------------------------------------------------------**
 ** Third relation in Eq. (11)																	 **
 **/

float tools::dNdr(int tx, float Kx, float Ax, float rx) {

	return rx * Kx * Ax * exp(-rx * tx) / ((1 + Ax * exp(-rx * tx)) * (1 + Ax * exp(-rx * tx)));
}
//================================================================================================//